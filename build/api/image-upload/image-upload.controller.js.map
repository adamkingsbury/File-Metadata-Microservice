{"version":3,"sources":["../../../server/api/image-upload/image-upload.controller.js"],"names":["sizeOf","require","fs","FileAPI","File","FileReader","ImageUploadController","req","res","getAll","then","status","json","imageUploads","catch","error","fPath","process","cwd","file","destination","filename","err","dimensions","console","log","finaliseResponse","fileReader","readAsDataURL","addEventListener","loadVals","data","target","result","buildResponse","fileData","_imageUpload","originalname","fileSize","size","imageBase64","width","height","createNew","objResult","toObject","unlink","_id","params","id","includeImage","query","getById","findResult","removeById","end"],"mappings":"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","file":"image-upload.controller.js","sourcesContent":["import ImageUploadDao from './image-upload.dao';\nvar sizeOf = require('image-size');\nvar fs = require('fs');\nvar FileAPI = require('file-api')\n  , File = FileAPI.File\n  , FileReader = FileAPI.FileReader;\n\nexport default class ImageUploadController {\n\n\n\n\n  static getAll(req, res) {\n    ImageUploadDao\n      .getAll()\n      .then(imageUploads => res.status(200).json(imageUploads))\n      .catch(error => res.status(400).json(error));\n  }\n\n\n\n\n\n  static createNew(req, res) {\n    let fPath = process.cwd() + \"/\" + req.file.destination + req.file.filename;\n\n    //calculate the dimensions of the file\n    sizeOf(fPath, function (err, dimensions) {\n      console.log('Processing Dimensions')\n      if (err) return finaliseResponse(400,err);\n\n      req.file.dimensions = dimensions;\n\n      var fileReader = new FileReader();\n      fileReader.readAsDataURL(new File(fPath));\n\n      fileReader.addEventListener('error', function (err){\n        finaliseResponse(400,err)\n      });\n\n      fileReader.addEventListener('load', function (loadVals) {\n        console.log(loadVals);\n        let data = loadVals.target.result;\n        buildResponse(null, data);\n      });\n    });\n\n    let buildResponse = function (err, fileData){\n      console.log('Building response')\n      if (err) return finaliseResponse(400,err);\n\n      //build the mongo object\n      let _imageUpload = {\n        filename: req.file.originalname,\n        fileSize: req.file.size,\n        imageBase64: fileData,\n        dimensions: {\n          width: req.file.dimensions.width,\n          height: req.file.dimensions.height\n        }\n      };\n\n      //Write the record to the database\n      ImageUploadDao\n        .createNew(_imageUpload)\n        .then((result) => {\n          let objResult = result.toObject();\n          delete objResult.imageBase64;\n          finaliseResponse(201, objResult);\n        })\n        .catch(error => finaliseResponse(400, error));\n    }\n\n\n    let finaliseResponse = function (status, json) {\n      console.log('finalising response');\n      console.log(json);\n      //always clear out the temporary file\n      fs.unlink(req.file.destination + req.file.filename, function (){\n        //now send the buildResponse\n        res.status(status).json(json);\n      });\n    }\n\n  }\n\n\n\n\n\n  static getById(req, res) {\n    let _id = req.params.id;\n    let includeImage = req.query.includeImage === \"true\";\n\n    ImageUploadDao\n      .getById(_id, includeImage)\n      .then((findResult) => res.status(200).json(findResult))\n      .catch(error => res.status(400).json(error));\n  }\n\n\n\n\n\n\n\n\n  static removeById(req, res) {\n    let _id = req.params.id;\n\n    ImageUploadDao\n      .removeById(_id)\n      .then(() => res.status(200).end())\n      .catch(error => res.status(400).json(error));\n  }\n}\n"]}